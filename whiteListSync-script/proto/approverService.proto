syntax = "proto3";
import "/home/barak/Desktop/SuperNova/proto/requestService.proto";//when loading with bloomRPC
import "proto/requestService.proto"; //when running in vscode
// import "/app/proto/requestService.proto"; //When using docker
package ApproverService;

service ApproverService {
    rpc AddCommanderApprover(AddApproverReq) returns (Approver) {}
    rpc AddSecurityApprover(AddApproverReq) returns (Approver) {}
    rpc AddSuperSecurityApprover(AddApproverReq) returns (Approver) {}
    rpc GetUserType(GetUserTypeReq) returns (GetUserTypeRes) {}
    rpc SearchApproverByDisplayName(SearchByDisplayNameReq) returns (ApproverArray) {}
    rpc SearchApproverByDomainUser(SearchByDomainUserReq) returns (ApproverArray) {}
    rpc GetAllSecurityApprovers(GetAllApproversReq) returns (ApproverArray) {}
    rpc GetAllSuperSecurityApprovers(GetAllApproversReq) returns (ApproverArray) {}
    rpc GetAllCommanderApprovers(GetAllApproversReq) returns (ApproverArray) {}
    
    rpc UpdateCommanderDecision(UpdateDecisionReq) returns (Request) {}
    rpc UpdateSecurityDecision(UpdateDecisionReq) returns (Request) {}
    rpc UpdateSuperSecurityDecision(UpdateDecisionReq) returns (Request) {}

    rpc GetAllApprovers(GetAllApproversReq) returns (ApproverArray) {}
    rpc GetAllApproverIds(GetAllApproversReq) returns (ApproverIdArray) {}
    rpc SyncApprover(SyncApproverReq) returns (Approver){}
    rpc DeleteApprover(DeleteApproverReq) returns (SuccessMessage){}
}


enum Decision{
    DECISION_UNKNOWN = 0;
    APPROVED = 1;
    DENIED = 2;
}

message KartoffelParams{
    //CreateOG
    optional string name = 1;
    optional string parent = 2;
    optional string source = 3; //for almost all requests

    //CreateRole

    //for role
    optional string jobTitle = 4;
    optional string directGroup = 5;
    optional string roleId = 6;

    //forDigitalIdentity
    optional string type = 7;
    // string source = 2;
    optional string uniqueId = 8;
    optional string mail = 9;
    optional bool isRoleAttachable = 10;

    //AssignRoleToEntity, same as changing role to entity
    optional string id = 11;
    // string uniqueId = 8;
    //CreateEntity
    optional string firstName = 12;
    optional string lastName = 13;
    optional string identityCard = 14;
    optional string personalNumber = 15;
    optional string serviceType = 16;
    repeated string phone = 17;
    repeated string mobilePhone = 18;
    optional string address = 19;
    optional string clearance = 20; //for createRole too
    optional string sex = 21;
    optional int64 birthdate = 22;
    optional string entityType = 23;

    //RenameOG
    // ?

    //RenameRole
    // ?

    //EditEntity
    // string firstName = 9;
    // string lastName = 10;
    // string identityCard = 11;
    // string personalNumber = 12;
    // string serviceType = 13;
    // repeated string phone = 14;
    // repeated string mobilePhone = 15;
    // string address = 16;
    // string clearance = 16;
    // string sex = 17;
    // int64 birthdate = 18;
    // string entityType = 19;
    // string id = 

    //DeleteOG
    // string id = ;

    //DeleteRole
    // string roleId = ;
    // string uniqueId = ;

    //DisconectRoleFromEntity
    // string uniqueId = 8;
    // string id = 9;
}

message UpdateDecisionReq{
    string id = 1;
    ApproverDecision approverDecision = 2;
}

message Request{
    EntityMin submittedBy = 1;
    RequestStatus status = 2;
    ApproverDecision commanderDecision = 3;
    ApproverDecision securityDecision = 4;
    ApproverDecision superSecurityDecision = 5;
    repeated EntityMin commanders = 6;  
    repeated EntityMin securityApprovers = 7; 
    KartoffelStatus kartoffelStatus = 8;
    ADStatus adStatus = 9;
    KartoffelParams kartoffelParams = 10;
    ADParams adParams = 11;
    string comments = 12;
    string approversComments = 13;
    int64 due = 14;

    string id = 15;
    int64 createdAt = 16;
    int64 updatedAt = 17; 
    RequestType type = 18;
    string serialNumber = 19;
    bool needSecurityDecision = 20;
    bool needSuperSecurityDecision = 21;
}


message ApproverDecision{
    EntityMin approver = 1;
    Decision decision = 2;
    optional string reason = 3;
    optional int64 date = 4;
}


message EntityMin{
    string id = 1;
    string displayName = 2;
    string identityCard = 3;
    string personalNumber = 4;
}

message CreateOGKartoffelParams{
    string name = 1;
    string parent = 2;
    string source = 3;
}


message ADParams{
    //CreateOG
    optional string ouDisplayName = 1;
    optional string ouName = 2;
    optional string name = 3;

    //CreateRole
    optional string samAccountName = 4;
    // string ouDisplayName = ;
    optional string jobTitle = 5;

    //AssignRoleToEntity
    optional string oldSAMAccountName = 6;
    optional string newSAMAccountName = 7;
    optional string upn = 8;
    optional string firstName = 9;
    optional string lastName = 10;
    optional string fullName = 11;
    optional string rank = 12;
    optional string roleSerialCode = 13;
    //CreateEntity - nothing

    //RenameOG
    //string ouDisplayName = ;
    optional string oldName = 14;
    optional string newName = 15;

    //RenameRole
    // string samAccountName = ;
    optional string newJobTitle = 16;

    //DeleteOG - ?

    //EditEntity
    // string samAccountName = ;
    // string firstName = ;
    // string lastName = ;
    // string fullName = ;

    //DisconectRoleFromEntity
    // string samAccountName = 4;
}

enum StageStatus{
    STAGE_UNKNOWN = 0;
    STAGE_IN_PROGRESS = 1;
    STAGE_DONE = 2;
    STAGE_FAILED = 3;
}


message ADStatus{
    StageStatus status = 1;
    string message = 2;
    int32 failedRetries = 3;
}

message KartoffelStatus{
    StageStatus status = 1;
    string message = 2;
    optional string createdId = 3;
    int32 failedRetries = 4;
}


enum RequestType {
    CREATE_OG = 0;
    CREATE_ROLE = 1;
    ASSIGN_ROLE_TO_ENTITY = 2;
    CREATE_ENTITY=3;
    RENAME_OG = 4;
    RENAME_ROLE = 5;
    EDIT_ENTITY = 6;
    DELETE_OG = 7;
    DELETE_ROLE = 8;
    DISCONNECT_ROLE=9;
    ADD_APPROVER = 10;
}














message SyncApproverReq{
    string approverId = 1;
}

message DeleteApproverReq{
    string approverId = 1;
}

message ApproverIdArray{
    repeated string approverIds = 1;
}

message GetAllApproversReq{
    
}

message SuccessMessage{
    bool success = 1;
}

message SearchByDisplayNameReq{
    string displayName = 1;
    UserType type = 2;
    int32 from = 3;
    int32 to = 4;

}
message SearchByDomainUserReq{
    string domainUser = 1;
    UserType type = 2;
}

message ApproverArray{
    repeated Approver approvers = 1;
}

message GetUserTypeReq{
    string entityId = 1;
}

message GetUserTypeRes{
    string entityId = 1;
    UserType type = 2;
}

message AddApproverReq{
    string entityId = 1;
    string displayName = 2;
    repeated string domainUsers = 3;
    string akaUnit = 4;
}

message Approver{
    string entityId = 1;
    string displayName = 2;
    repeated string domainUsers = 3; //entity may have multiple emails
    UserType type = 4;
    string akaUnit = 5;
    string id = 6;
}

enum RequestStatus{
    SUBMITTED = 0;
    DECLINED = 1;
    IN_PROGRESS = 2;
    DONE = 3;
    FAILED = 4;
}

enum UserType{
    SECURITY = 0;
    SUPER_SECURITY = 1;
    COMMANDER = 2;
    SOLDIER = 3;
}
