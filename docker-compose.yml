version: '3.8'
services:
  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./data/db:/data/db
    ports:
      - 27017:27017
    restart: unless-stopped

  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --appendonly yes --requirepass "mozart"
    volumes:
      - ./data/data:/data
    ports:
      - 6379:6379
    restart: unless-stopped

  spike-service:
    image: spike-service
    build: ./spike-service
    env_file:
      - ./supernova.env
    ports:
      - '8080:8080'
    depends_on:
      - redis
    volumes:
      - spike-utils:/spikeUtils
      - ./logs/spike-service:/logs
    environment:
      - SS_REDIS_HOST=redis
      - SS_REDIS_PORT=6379
      - SS_REDIS_PASSWORD=mozart
      - SS_SPIKE_PUBLIC_KEY_FULL_PATH=/spikeUtils/publickey.pem
      - SS_SHMUEL_AUDIENCE=shmuel
      - SS_KARTOFFEL_AUDIENCE=kartoffel
      - SS_LOG_PATH=/logs

  request-service:
    image: request-service
    build: ./request-service
    env_file:
      - ./supernova.env
    ports:
      - '8081:8080'
    depends_on:
      - mongo
      - notification-service
    volumes:
      - ./logs/request-service:/logs
    environment:
      - RS_MONGO_URL=mongodb://mongo:27017/supernova
      - RS_NS_URL=notification-service:8080
      - RS_TS_URL=tea-service:8080
      - RS_LOG_PATH=/logs

  kartoffel-service:
    image: kartoffel-service
    build: ./kartoffel-service/
    env_file:
      - ./supernova.env
    ports:
      - '8082:8080'
    depends_on:
      - spike-service
    volumes:
      - ./logs/kartoffel-service:/logs
    environment:
      - KS_USE_FAKER=true
      - KS_SS_URL=spike-service:8080
      - KS_ROOT_ID=611b5c58a7a257532f054a4b
      - KS_LOG_PATH=/logs

  producer-service:
    image: producer-service
    build: ./producer-service/
    env_file:
      - ./supernova.env
    ports:
      - '8083:8080'
    depends_on:
      - request-service
      - spike-service
    volumes:
      - ./logs/producer-service:/logs
    environment:
      - PS_QUEUE_API_URL=http://20.199.120.227:3000
      - PS_RS_URL=request-service:8080
      - PS_DEV_MODE=true
      - PS_SS_URL=spike-service:8080
      - PS_SHMUEL_AUDIENCE=shmuel
      - PS_OLD_DOMAIN=oldDomain
      - PS_NEW_DOMAIN=newDomain
      - PS_LOG_PATH=/logs

  notification-service:
    image: notification-service
    build: ./notification-service/
    env_file:
      - ./supernova.env
    volumes:
      - ./logs/notification-service:/logs
    ports:
      - '8084:8080'
    environment:
      - NS_MONGO_URL=mongodb://mongo:27017/supernova
      - NS_LOG_PATH=/logs

  approver-service:
    image: approver-service
    build: ./approver-service/
    env_file:
      - ./supernova.env
    ports:
      - '8085:8080'
    depends_on:
      - request-service
      - kartoffel-service
    volumes:
      - ./logs/approver-service:/logs
    environment:
      - APS_MONGO_URL=mongodb://mongo:27017/supernova
      - APS_KS_URL=kartoffel-service:8080
      - APS_RS_URL=request-service:8080
      - APS_LOG_PATH=/logs

  tea-service:
    image: tea-service
    build: ./tea-service/
    env_file:
      - ./supernova.env
    volumes:
      - ./logs/tea-service:/logs
      - ./tea-service/src/excelFiles:/teaUtils
    ports:
      - '8086:8080'
    environment:
      - TS_KS_URL=kartoffel-service:8080
      - TS_MONGO_URL=mongodb://mongo:27017/supernova
      - TS_LOG_PATH=/logs
      - TS_NEED_INIT=true
      - TS_INIT_EMPTY_ARRAYS=true
      - TS_EXCEL_INIT_FOLDER=/teaUtils
      - TS_EXCEL_INIT_FILE=initPrefixes.xlsx

  bulk-service:
    image: bulk-service
    build: ./bulk-service/
    env_file:
      - ./supernova.env
    volumes:
      - bulk-files:/bulkFiles
      - ./logs/bulk-service:/logs
    ports:
      - '8087:8080'
    depends_on:
      - request-service
      - tea-service
    environment:
      - BS_RS_URL=request-service:8080
      - BS_FOLDER_PATH=/bulkFiles
      - BS_LOG_PATH=/logs

  kartoffel-consumer:
    image: kartoffel-consumer
    build: ./kartoffel-consumer/
    env_file:
      - ./supernova.env
    ports:
      - '8088:8080'
    depends_on:
      - request-service
      - kartoffel-service
      - tea-service
    volumes:
      - ./logs/kartoffel-consumer:/logs
    environment:
      - KC_RS_URL=request-service:8080
      - KC_TS_URL=tea-service:8080
      - KC_KS_URL=kartoffel-service:8080
      - KC_KAFKA_HOST=kafka
      - KC_KAFKA_PORT=29092
      - KC_LOG_PATH=/logs
      - KC_KAFKA_CONSUMER_TOPIC=requests

  execution-script:
    image: execution-script
    build: ./execution-script/
    env_file:
      - ./supernova.env
    depends_on:
      - request-service
      - producer-service
    volumes:
      - ./logs/execution-script:/logs
    environment:
      - EXS_RS_URL=request-service:8080
      - EXS_PS_URL=producer-service:8080
      - EXS_APS_URL=approver-service:8080
      - EXS_EVERY_HOUR=1
      - EXS_CRON_JOB=false
      - EXS_LOG_PATH=/logs

  whiteListSync-script:
    image: whitelistsync-script
    build: ./whiteListSync-script/
    env_file:
      - ./supernova.env
    depends_on:
      - approver-service
    volumes:
      - ./logs/whiteListSync-script:/logs
    environment:
      - WLS_APS_URL=approver-service:8080
      - WLS_HOUR=10
      - WLS_MINUTE=0
      - WLS_CRON_JOB=false
      - WLS_LOG_PATH=/logs

  population-script:
    image: population-script
    build: ./population-script/
    env_file:
      - ./supernova.env
    depends_on:
      - request-service
    environment:
      - POS_RS_URL=request-service:8080
      - POS_ENTITY_IDS=aaaaaaaaaaaaaaaaaaaaaaaa,bbbbbbbbbbbbbbbbbbbbbbbb
      - POS_GENERATE_COUNT=50
      - POS_LOG_PATH=/logs

  authentication-service:
    image: authentication-service
    build: ./authentication-service/
    env_file:
      - ./supernova.env
    ports:
      - '9000:8080'
    depends_on:
      - kartoffel-service
      - approver-service
    volumes:
      - ./logs/authentication-service:/logs
    environment:
      - AS_SHRAGA_URL=https://shraga-prod.northeurope.cloudapp.azure.com
      - AS_CLIENT_ENDPOINT=http://localhost:3000
      - AS_KARTOFFEL_RPC_ENDPOINT=kartoffel-service:8080
      - AS_APS_URL=approver-service:8080
      - AS_LOG_PATH=/logs

  api-gateway:
    image: api-gateway
    build: ./api-gateway/
    env_file:
      - ./supernova.env
    volumes:
      - bulk-files:/bulkFiles
      - spike-utils:/spikeUtils
      - ./logs/api-gateway:/logs
    ports:
      - '2000:8080'
    depends_on:
      - spike-service
      - kartoffel-service
      - producer-service
      - request-service
      - authentication-service
      - notification-service
      - approver-service
      - tea-service
      - bulk-service
      - apm-server
    environment:
      - GATEWAY_KS_URL=kartoffel-service:8080
      - GATEWAY_RS_URL=request-service:8080
      - GATEWAY_PS_URL=producer-service:8080
      - GATEWAY_NS_URL=notification-service:8080
      - GATEWAY_AS_URL=http://localhost:9000
      - GATEWAY_BS_URL=bulk-service:8080
      - GATEWAY_APS_URL=approver-service:8080
      - GATEWAY_BS_FOLDER_PATH=/bulkFiles
      - GATEWAY_AUTHENTICATION_REQUIRED=true
      - GATEWAY_APM_URL=http://apm-server:8200
      - GATEWAY_TS_URL=tea-service:8080
      - GATEWAY_SPIKE_AUDIENCE_ID=bwwIB0gSS0xay_odirl0OCAJ3gUlXkKMKijbDY_e
      - GATEWAY_SPIKE_PUBLIC_KEY_FULL_PATH=/spikeUtils/publickey.pem
      - GATEWAY_WRITE_SCOPE_NAME=write
      - GATEWAY_LOG_PATH=/logs

  supernova-ui:
    image: supernova-ui
    build: ./SuperNovaUI/
    env_file:
      - ./supernova.env
    depends_on:
      - api-gateway
    ports:
      - '3000:80'
    environment:
      - REACT_APP_BASE_URL=http://localhost:2000
      - REACT_TOKEN_NAME=sp-token

  # Kafka GUI
  kouncil:
    image: consdata/kouncil:latest
    ports:
      - '4001:8080'
    environment:
      bootstrapServers: 'kafka:29092'
    depends_on:
      - 'kafka'
  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    ports:
      - '2181:2181'
      - '9092:9092'
    environment:
      KAFKA_LISTENERS: 'INTERNAL://:29092,EXTERNAL://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: '6000'
      KAFKA_RESTART_ATTEMPTS: '10'
      KAFKA_RESTART_DELAY: '5'
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: '0'

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.15.0
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    cap_add: ['CHOWN', 'DAC_OVERRIDE', 'SETGID', 'SETUID']
    cap_drop: ['ALL']
    ports:
      - 8200:8200
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    environment:
      - bootstrap.memory_lock=true
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.threshold_enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - 5601:5601
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

volumes:
  bulk-files:
  spike-utils:
  esdata:
    driver: local
