version: '3.8'
services:
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
  #   container_name: elasticsearch
  #   ports:
  #     - 9200:9200

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.13.2
  #   container_name: kibana
  #   ports:
  #     - 5601:5601
  #   environment:
  #     ELASTICSEARCH_URL: http://elasticsearch:9200
  #     ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
  #   depends_on:
  #     - elasticsearch

  mongodb:
    image: mongo
    container_name: mongodb
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./data/db:/data/db
    ports:
      - 27017:27017
    restart: unless-stopped

  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --appendonly yes --requirepass "mozart"
    volumes:
      - ./data/data:/data
    ports:
      - 6379:6379
    restart: unless-stopped

  spike-service:
    image: spike-service
    build:
      context: .
      dockerfile: ./spike-service/Dockerfile
    env_file:
      - ./supernova.env
    ports:
      - '8080:8080'
    depends_on:
      - redis
    environment:
      - SS_REDIS_HOST=redis
      - SS_REDIS_PORT=6379
      - SS_REDIS_PASSWORD=mozart

  request-service:
    image: request-service
    build:
      context: .
      dockerfile: ./request-service/Dockerfile
    env_file:
      - ./supernova.env
    ports:
      - '8081:8080'
    depends_on:
      - mongodb
      - notification-service
    environment:
      - RS_MONGO_URL=mongodb://mongodb:27017/supernova
      - RS_NS_URL=notification-service:8080

  # kartoffel-service:
  #   image: kartoffel-service
  #   build:
  #     context: .
  #     dockerfile: ./kartoffel-service/Dockerfile
  #   env_file:
  #     - ./supernova.env
  #   ports:
  #     - '8082:8080'
  #   depends_on:
  #     - spike-service
  #   environment:
  #     - KS_USE_FAKER=true

  # producer-service:
  #   image: producer-service
  #   build:
  #     context: .
  #     dockerfile: ./producer-service/Dockerfile
  #   env_file:
  #     - ./supernova.env
  #   ports:
  #     - '8083:8080'
  #   # depends_on:
  #   #   - kartoffel-service
  #   environment:
  #     - PS_QUEUE_API_URL=https://www.google.com
  #     - PS_RS_URL=request-service:8080
  #     - PS_DEV_MODE=true

  notification-service:
    image: notification-service
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    env_file:
      - ./supernova.env
    ports:
      - '8084:8080'
    environment:
      - NS_MONGO_URL=mongodb://mongodb:27017/supernova

  approver-service:
    image: approver-service
    build:
      context: .
      dockerfile: ./approver-service/Dockerfile
    env_file:
      - ./supernova.env
    ports:
      - '8085:8080'
    depends_on:
      - request-service
    environment:
      - APS_MONGO_URL=mongodb://mongodb:27017/supernova
      - APS_KS_URL=kartoffel-service:8080
      - APS_RS_URL=request-service:8080

  # tea-service:
  #   image: tea-service
  #   build:
  #     context: .
  #     dockerfile: ./tea-service/Dockerfile
  #   env_file:
  #     - ./supernova.env
  #   ports:
  #     - '8086:8080'
  #   depends_on:
  #     - request-service
  #   environment:
  #     - TS_MONGO_URL=mongodb://mongodb:27017/supernova
  #     - TS_KS_URL=kartoffel-service:8080

  authentication-service:
    image: authentication-service
    build:
      context: .
      dockerfile: ./authentication-service/Dockerfile
    env_file:
      - ./supernova.env
    ports:
      - '9000:8080'
    environment:
      - AS_SHRAGA_URL=https://shraga-prod.northeurope.cloudapp.azure.com
      - AS_CLIENT_ENDPOINT=http://localhost:3000

  api-gateway:
    image: api-gateway
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    env_file:
      - ./supernova.env
    ports:
      - '2000:8080'
    # depends_on:
    #   - kartoffel-service
    #   - producer-service
    #   - request-service
    environment:
      - GATEWAY_KS_URL=kartoffel-service:8080
      - GATEWAY_RS_URL=request-service:8080
      - GATEWAY_PS_URL=producer-service:8080
      - GATEWAY_AS_URL=http://localhost:9000
